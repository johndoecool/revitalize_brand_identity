# =============================================================================
# Security Scanning Template - Enterprise CI/CD
# =============================================================================
# Comprehensive security scanning for source code and container images
# Uses ADO built-in security tools and open-source scanners
# =============================================================================

parameters:
- name: scanType
  type: string
  values:
  - 'source-code'
  - 'container-images'
- name: dockerNamespace
  type: string
  default: 'avishekdascool'
- name: buildVersion
  type: string
  default: '1.0.0'
- name: failOnHighSeverity
  type: boolean
  default: true

steps:
# =============================================================================
# SOURCE CODE SECURITY SCANNING
# =============================================================================
- ${{ if eq(parameters.scanType, 'source-code') }}:
  - script: |
      echo "üîí Starting Source Code Security Analysis..."
      echo "Scan Type: ${{ parameters.scanType }}"
      echo "Fail on High Severity: ${{ parameters.failOnHighSeverity }}"
    displayName: 'Security Scan Configuration'
  
  # Python Security Analysis with Bandit
  - script: |
      echo "üêç Python Security Analysis with Bandit..."
      
      # Install bandit if not already installed
      pip install bandit
      
      # Scan each service
      services=("brand-service" "data-collection" "analysis-engine")
      overall_issues=0
      
      for service in "${services[@]}"; do
        if [ -d "$service" ]; then
          echo "Scanning $service..."
          bandit -r $service/app/ -f json -o $service-bandit-report.json || true
          bandit -r $service/app/ -ll > $service-bandit-summary.txt || true
          
          # Count high severity issues
          high_issues=$(grep -c '"issue_severity": "HIGH"' $service-bandit-report.json 2>/dev/null || echo "0")
          overall_issues=$((overall_issues + high_issues))
          
          echo "$service: $high_issues high severity issues found"
        fi
      done
      
      echo "Total high severity issues: $overall_issues"
      
      if [ ${{ parameters.failOnHighSeverity }} == "true" ] && [ $overall_issues -gt 0 ]; then
        echo "‚ùå SECURITY GATE FAILED: $overall_issues high severity issues found"
        echo "##vso[task.logissue type=error]Security scan failed with $overall_issues high severity issues"
        exit 1
      else
        echo "‚úÖ Security scan passed or warnings only"
      fi
    displayName: 'Python Security Scan (Bandit)'
  
  # Dependency Vulnerability Scanning
  - script: |
      echo "üìö Dependency Vulnerability Scanning..."
      
      # Install safety for Python dependency checking
      pip install safety
      
      services=("brand-service" "data-collection" "analysis-engine")
      total_vulnerabilities=0
      
      for service in "${services[@]}"; do
        if [ -f "$service/requirements.txt" ]; then
          echo "Checking dependencies for $service..."
          cd $service
          
          # Run safety check
          safety check --json --output ../safety-$service.json || true
          safety check --short-report > ../safety-$service-summary.txt || true
          
          # Count vulnerabilities
          vulns=$(grep -c '"vulnerability_id"' ../safety-$service.json 2>/dev/null || echo "0")
          total_vulnerabilities=$((total_vulnerabilities + vulns))
          
          echo "$service: $vulns vulnerabilities found"
          cd ..
        fi
      done
      
      echo "Total dependency vulnerabilities: $total_vulnerabilities"
      
      if [ ${{ parameters.failOnHighSeverity }} == "true" ] && [ $total_vulnerabilities -gt 5 ]; then
        echo "‚ùå DEPENDENCY GATE FAILED: Too many vulnerabilities ($total_vulnerabilities)"
        echo "##vso[task.logissue type=error]Too many dependency vulnerabilities: $total_vulnerabilities"
        exit 1
      else
        echo "‚úÖ Dependency scan acceptable"
      fi
    displayName: 'Dependency Vulnerability Scan'
  
  # Secrets Detection
  - script: |
      echo "ü§ê Secrets Detection Scan..."
      
      # Install truffleHog for secrets detection
      pip install truffleHog || pip install truffleHog3 || echo "TruffleHog not available"
      
      # Simple regex-based secrets detection
      echo "Scanning for potential secrets..."
      
      # Common secret patterns
      secret_patterns=(
        "api[_-]?key[\s]*=[\s]*['\"][a-zA-Z0-9]{20,}['\"]"  # API keys
        "password[\s]*=[\s]*['\"][^'\"]{8,}['\"]"            # Passwords
        "secret[_-]?key[\s]*=[\s]*['\"][a-zA-Z0-9]{20,}['\"]" # Secret keys
        "token[\s]*=[\s]*['\"][a-zA-Z0-9]{20,}['\"]"         # Tokens
      )
      
      secret_found=false
      
      for pattern in "${secret_patterns[@]}"; do
        if grep -r -i -E "$pattern" --include="*.py" --include="*.js" --include="*.yaml" --include="*.yml" --exclude-dir=.git .; then
          echo "‚ö†Ô∏è Potential secret pattern found: $pattern"
          secret_found=true
        fi
      done
      
      if [ "$secret_found" = true ]; then
        echo "##vso[task.logissue type=warning]Potential secrets detected in code"
      else
        echo "‚úÖ No obvious secrets detected"
      fi
    displayName: 'Secrets Detection'

# =============================================================================
# CONTAINER IMAGE SECURITY SCANNING
# =============================================================================
- ${{ if eq(parameters.scanType, 'container-images') }}:
  - script: |
      echo "üê≥ Starting Container Security Analysis..."
      echo "Docker Namespace: ${{ parameters.dockerNamespace }}"
      echo "Build Version: ${{ parameters.buildVersion }}"
    displayName: 'Container Scan Configuration'
  
  # Install container scanning tools
  - script: |
      echo "üõ†Ô∏è Installing container security tools..."
      
      # Install Trivy for container scanning
      sudo apt-get update
      sudo apt-get install -y wget apt-transport-https gnupg lsb-release
      wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
      sudo apt-get update
      sudo apt-get install -y trivy
    displayName: 'Install Security Tools'
    condition: eq(variables['Agent.OS'], 'Linux')
  
  # Scan Docker images with Trivy
  - script: |
      echo "üîç Scanning Docker images for vulnerabilities..."
      
      services=("brand-service" "data-collection" "analysis-engine")
      total_critical=0
      total_high=0
      
      for service in "${services[@]}"; do
        image="${{ parameters.dockerNamespace }}/$service:${{ parameters.buildVersion }}"
        echo "Scanning $image..."
        
        # Run Trivy scan
        trivy image --format json --output $service-trivy-report.json $image || true
        trivy image --severity HIGH,CRITICAL $image > $service-trivy-summary.txt || true
        
        # Count vulnerabilities
        critical=$(grep -c '"Severity": "CRITICAL"' $service-trivy-report.json 2>/dev/null || echo "0")
        high=$(grep -c '"Severity": "HIGH"' $service-trivy-report.json 2>/dev/null || echo "0")
        
        total_critical=$((total_critical + critical))
        total_high=$((total_high + high))
        
        echo "$service: $critical critical, $high high severity vulnerabilities"
      done
      
      echo "Total vulnerabilities - Critical: $total_critical, High: $total_high"
      
      # Fail build if too many high/critical issues
      if [ ${{ parameters.failOnHighSeverity }} == "true" ]; then
        if [ $total_critical -gt 0 ]; then
          echo "‚ùå CONTAINER SECURITY GATE FAILED: $total_critical critical vulnerabilities found"
          echo "##vso[task.logissue type=error]Container scan failed with $total_critical critical vulnerabilities"
          exit 1
        elif [ $total_high -gt 10 ]; then
          echo "‚ùå CONTAINER SECURITY GATE FAILED: Too many high vulnerabilities ($total_high)"
          echo "##vso[task.logissue type=error]Container scan failed with $total_high high vulnerabilities"
          exit 1
        fi
      fi
      
      echo "‚úÖ Container security scan completed"
    displayName: 'Container Vulnerability Scan (Trivy)'
  
  # Container Configuration Security
  - script: |
      echo "‚öôÔ∏è Checking container security configurations..."
      
      services=("brand-service" "data-collection" "analysis-engine")
      config_issues=0
      
      for service in "${services[@]}"; do
        echo "Checking $service Dockerfile security..."
        
        if [ -f "$service/Dockerfile" ]; then
          dockerfile="$service/Dockerfile"
          
          # Check for root user
          if ! grep -q "^USER" $dockerfile; then
            echo "‚ö†Ô∏è $service: No USER directive found (running as root)"
            config_issues=$((config_issues + 1))
          fi
          
          # Check for HEALTHCHECK
          if ! grep -q "HEALTHCHECK" $dockerfile; then
            echo "‚ö†Ô∏è $service: No HEALTHCHECK directive found"
            config_issues=$((config_issues + 1))
          fi
          
          # Check for exposed ports
          if ! grep -q "EXPOSE" $dockerfile; then
            echo "‚ö†Ô∏è $service: No EXPOSE directive found"
          fi
          
          echo "‚úÖ $service Dockerfile security check completed"
        fi
      done
      
      echo "Configuration issues found: $config_issues"
      
      if [ $config_issues -gt 3 ] && [ ${{ parameters.failOnHighSeverity }} == "true" ]; then
        echo "##vso[task.logissue type=warning]Multiple container configuration issues found"
      fi
    displayName: 'Container Configuration Check'

# =============================================================================
# SECURITY REPORT GENERATION
# =============================================================================
- script: |
    echo "üìä Generating Security Summary Report..."
    
    # Create security report directory
    mkdir -p $(Build.ArtifactStagingDirectory)/security-reports
    
    # Collect all security reports
    find . -name "*bandit*" -o -name "*safety*" -o -name "*trivy*" | while read file; do
      cp "$file" $(Build.ArtifactStagingDirectory)/security-reports/ 2>/dev/null || true
    done
    
    # Generate summary report
    cat > $(Build.ArtifactStagingDirectory)/security-reports/security-summary.md << EOF
    # Security Scan Summary Report
    
    **Build Version:** ${{ parameters.buildVersion }}
    **Scan Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
    **Scan Type:** ${{ parameters.scanType }}
    
    ## Scan Results
    
    ### Source Code Security
    - Python security analysis (Bandit): Completed
    - Dependency vulnerability scan (Safety): Completed
    - Secrets detection: Completed
    
    ### Container Security
    - Image vulnerability scan (Trivy): Completed
    - Container configuration check: Completed
    
    ## Quality Gate Status
    - Fail on High Severity: ${{ parameters.failOnHighSeverity }}
    - Overall Status: See individual scan results
    
    ## Recommendations
    1. Review all HIGH and CRITICAL severity findings
    2. Update dependencies with known vulnerabilities
    3. Implement proper security configurations
    4. Regular security scanning in CI/CD pipeline
    
    ---
    Generated by Brand Intelligence Hub Enterprise CI/CD Pipeline
    EOF
    
    echo "‚úÖ Security reports generated"
  displayName: 'Generate Security Reports'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Security Reports'
  condition: always()
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/security-reports'
    ArtifactName: 'security-scan-reports'
    publishLocation: 'Container'